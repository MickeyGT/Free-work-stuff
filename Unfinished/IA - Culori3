#include<fstream>
#include<string.h>
#include<ctype.h>
#include<iostream>
#include<algorithm>
#include<map>
#include<unordered_map>
#include<array>
#include<deque>
#include<unordered_set>
#include<set>
#include<math.h>
using namespace std;
int n, i, total[1200], prv[6][1200], j, nr, len, k, p, carry,temp[1200],cifre;
void adunare(int x[1200], int y[1200], int z[1200])
{
	int cifre = max(x[0], y[0]);
	carry = 0;
	for (p = 1; p <= cifre; p++)
	{
		z[p] = (x[p] + y[p] + carry) % 10;
		if (x[p] + y[p] + carry >= 10)
			carry = 1;
		else
			carry = 0;
	}
	if (x[cifre] + y[cifre] + carry >= 10)
	{
		z[0] = cifre + 1;
		z[cifre + 1] = 1;
	}
	else
	{
		z[0] = cifre;
	}
}
void functie1()
{
	for (j = 2; j <= n; j++)
	{
		if (j % 2 == 0)
		{
			adunare(prv[1], prv[3], prv[2]);
			adunare(prv[5], prv[3], prv[4]);
			for (k = 0; k <= 1198; k++)
			{
				prv[1][k] = prv[3][k]= prv[5][k]=0;
			}
		}
		else
		{
			len = prv[2][0];
			for (i = 0; i <= len; i++)
				prv[1][i] = prv[2][i];
			len = prv[4][0];
			for (i = 0; i <= len; i++)
				prv[5][i] = prv[4][i];
			{
				cifre = max(prv[2][0], prv[4][0]);
				carry = 0;
				for (p = 1; p <= cifre; p++)
				{
					prv[3][p] = (prv[2][p] + prv[4][p] + carry) % 10;
					if (prv[2][p] + prv[4][p] + carry >= 10)
						carry = 1;
					else
						carry = 0;
					prv[2][p - 1] = prv[4][p - 1] = 0;
				}
				if (prv[2][cifre] + prv[4][cifre] + carry >= 10)
				{
					prv[3][0] = cifre + 1;
					prv[3][cifre + 1] = 1;
				}
				else
				{
					prv[3][0] = cifre;
				}
			}
			prv[2][cifre] = prv[4][cifre] = 0;	
		}
	}
	adunare(prv[2], total, temp);
	adunare(prv[4], temp, total);
}
void functie2()
{
	for (j = 2; j <= n; j++)
	{
		if (j % 2 == 1)
		{
			adunare(prv[5], prv[3], prv[4]);
			adunare(prv[1], prv[3], prv[2]);
			for (k = 0; k <= 1198; k++)
			{
				prv[1][k] = prv[3][k] = prv[5][k] = 0;
			}
		}
		else
		{
			len = prv[2][0];
			for (i = 0; i <= len; i++)
				prv[1][i] = prv[2][i];
			adunare(prv[2], prv[4], prv[3]);
			len = prv[4][0];
			for (i = 0; i <= len; i++)
				prv[5][i] = prv[4][i];
			for (k = 0; k <= 1198; k++)
			{
				prv[2][k] = prv[4][k] = 0;
			}
		}
	}
	adunare(prv[1], total, temp);
	adunare(prv[3], temp, total);
	adunare(prv[5], total, temp);
	len = temp[0];
	for (i = 0; i <= len; i++)
	{
		total[i] = temp[i];
		temp[i] = 0;
	}
}
int main()
{
	ifstream f("file.in");
	ofstream g("file.out");
	f >> n;
	prv[1][0] = 1;
	prv[1][1] = 1;
	functie1();
	memset(prv, 0, sizeof(prv));
	prv[2][0] = 1;
	prv[2][1] = 1;
	functie2();
	memset(prv, 0, sizeof(prv));
	prv[3][0] = 1;
	prv[3][1] = 1;
	functie1();
	memset(prv, 0, sizeof(prv));
	prv[4][0] = 1;
	prv[4][1] = 1;
	functie2();
	memset(prv, 0, sizeof(prv));
	prv[5][0] = 1;
	prv[5][1] = 1;
	functie1();
	len = total[0];
	for (i = len; i >= 1; i--)
	{
		g << total[i];
	}
	return 0;
}
