#include<fstream>
#include<string.h>
#include<ctype.h>
#include<iostream>
#include<algorithm>
#include<map>
#include<unordered_map>
#include<array>
#include<functional>
#include<deque>
#include<math.h>
#include<unordered_set>
#include<queue>
#include<set>
#include<iomanip>
#include<bitset>
using namespace std;
int n,v[50500],i,j,k,ok,nr,viz[50500],elmax;
unordered_map<int,int>st;
unordered_map<int, int>::iterator it;
vector<int>leg[50500];
vector<int>::iterator iter;
deque<int>que;
void bfs(int nod)
{
	que.push_back(nod);
	viz[nod] = 1;
	while (que.size() != 0)
	{
		int el = que.front();
		que.pop_front();
		for (iter = leg[el].begin(); iter != leg[el].end();iter++)
			if(viz[*iter]==0)
			{
				viz[*iter] = 1;
				que.push_back(*iter);
			}
	}
}
int main()
{
	ifstream f("autobuze.in");
	ofstream g("autobuze.out");
	//ifstream f("file.in");
	//ofstream g("file.out");
	f >> n;
	for (i = 1; i <= n; i++)
	{
		f >> v[i];
		elmax = max(elmax, v[i]);
	}
	sort(v + 1, v + n + 1);
	for (i = 1; i <= n; i++)
		st.insert(make_pair(v[i], i));
	
	for (i = 1; i <= n; i++)
		if(viz[i]==0)
		{
			for (j = 2; v[i] * j <= elmax; j++)
			{
				it = st.find(v[i] * j);
				if (it != st.end())
				{
					viz[it->second] = 1;
					leg[i].push_back(it->second);
					leg[it->second].push_back(i);
				}
			}
		}
	memset(viz, 0, sizeof(viz));
	for(i=1;i<=n;i++)
		if (viz[i] == 0)
		{
			nr++;
			bfs(i);
		}
	g << nr;
	return 0;
}
