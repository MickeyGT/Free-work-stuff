#include <stdio.h>
#include <ctype.h>
#include <cstring>
using namespace std;
int n, m, aib[100100], el, i, k, type, a, b, t, j;
class InParser {
private:
	FILE *fin;
	char *buff;
	int sp;

	char read_ch() {
		++sp;
		if (sp == 4096) {
			sp = 0;
			fread(buff, 1, 4096, fin);
		}
		return buff[sp];
	}

public:
	InParser(const char* nume) {
		fin = fopen(nume, "r");
		buff = new char[4096]();
		sp = 4095;
	}

	InParser& operator >> (int &n) {
		char c;
		while (!isdigit(c = read_ch()) && c != '-');
		int sgn = 1;
		if (c == '-') {
			n = 0;
			sgn = -1;
		}
		else {
			n = c - '0';
		}
		while (isdigit(c = read_ch())) {
			n = 10 * n + c - '0';
		}
		n *= sgn;
		return *this;
	}

	InParser& operator >> (long long &n) {
		char c;
		n = 0;
		while (!isdigit(c = read_ch()) && c != '-');
		long long sgn = 1;
		if (c == '-') {
			n = 0;
			sgn = -1;
		}
		else {
			n = c - '0';
		}
		while (isdigit(c = read_ch())) {
			n = 10 * n + c - '0';
		}
		n *= sgn;
		return *this;
	}
};
// We will add val to pos and all the nodes whose intervals incldue pos.
// Note that pos needs to be unsigned because otherwise we will get the negative complement.
void update(int val,unsigned int pos)
{
	while (pos <= n)
	{
		//We get 2's complement to pos,bitwise AND it with pos, and add that to pos and we get the next position.
		aib[pos] += val;
		pos += (~pos + 1)&(pos);
	}
}
int search(unsigned int pos)
{
	int res=0;
	while (pos != 0)
	{
		res += aib[pos];
		pos -= (~pos + 1)&pos;
	}
	return res;
}
int main()
{
	InParser fin("file.in");
	//ofstream g("file.out");
	fin >> t;
	for (j = 1; j <= t; j++)
	{
		fin >> n;
		for (i = 1; i <= n; i++)
		{
			fin >> el;
			update(el, i);
		}
		fin >> m;
		for (k = 1; k <= m; k++)
		{
			fin >> type;
			if (type == 0)
			{
				fin >> a >> b;
			//	g << search(b+a) - search(a - 1-b)-(search(a)-search(a-1))<< '\n';
			}
			if (type == 1||type==2)
			{
				fin >> a >> b;
				if (type == 1)
				{
					fin >> a >> b;
					update(b, a);
				}
				else
				{
					fin >> a >> b;
					update(-1*b, a);
				}
				
			}
			if (type == 3)
			{
				fin >> el>>a>>b;
				update(el, b);
				update(-1 * el, a);
			}
		}
		memset(aib, 0, sizeof(aib));
	}
	return 0;
}
