#include<fstream>
#include<string.h>
#include<ctype.h>
#include<iostream>
#include<algorithm>
#include<map>
#include<unordered_map>
#include<array>
#include<deque>
#include<unordered_set>
#include<set>
#include<math.h>
using namespace std;
long long t, p, n, m, q, i, k, pi[100010],j,sum;
unordered_set<long long>rez1, rez2;
unordered_set<long long>::iterator it1,it2;
char s[100100], st[100010], dr[100010];
int main()
{
	ifstream f("file.in");
	ofstream g("file.out");
	f >> t;
	for (p = 1; p <= t; p++)
	{
		f >> s;
		f >> st;
		f >> dr;
		m = strlen(s);
		n = strlen(st);
		pi[1] = 0;
		k = 0;
		for (i = 1; i < n; i++)
		{
			while (k > 0 && (st[k] != st[i]))
				k = pi[k - 1];
			if (st[k] == st[i])
				k++;
			pi[i] = k;
		}
		q = 0;
		for (i = 0; i < m; i++)
		{
			while (q > 0 && (st[q] != s[i]))
				q = pi[q - 1];
			if (st[q] == s[i])
				q++;
			if (q == n)
			{
				rez1.insert(i - n + 1);
				q = pi[q - 1];
			}
		}
		memset(pi, 0, sizeof(pi));
		n = strlen(dr);
		pi[1] = 0;
		k = 0;
		for (i = 1; i < n; i++)
		{
			while (k > 0 && (dr[k] != dr[i]))
				k = pi[k - 1];
			if (dr[k] == dr[i])
				k++;
			pi[i] = k;
		}
		q = 0;
		for (i = 0; i < m; i++)
		{
			while (q > 0 && (dr[q] != s[i]))
				q = pi[q - 1];
			if (dr[q] == s[i])
				q++;
			if (q == n)
			{
				rez2.insert(i - n + 1);
				q = pi[q - 1];
			}
		}
		it1 = rez1.begin();
		it2 = rez2.begin();
		n = strlen(st);
		m = strlen(dr);
		i = j = 1;
		sum = 0;
		while (it1 != rez1.end()&&it2!=rez2.end())
		{
			if (*it1+n <= *it2+m&&*it1<=*it2)
			{
				sum += rez2.size() - j + 1;
				it1++;
				i++;
			}
			else
			{
				if (it2 != rez2.end())
				{
					it2++;
					j++;
				}
			}
		}
		g << sum << '\n';
		rez2.clear();
		rez1.clear();
		memset(pi, 0, sizeof(pi));
	}
	return 0;
}
