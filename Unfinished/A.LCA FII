#include<fstream>
#include<string.h>
#include<ctype.h>
#include<algorithm>
#include<map>
#include<unordered_map>
#include<array>
#include<deque>
#include<queue>
#include<math.h>
#include<functional>
#include<unordered_set>
#include<set>
#include<iostream>
#include<iomanip>
#include<bitset>
using namespace std;
int euler[100200],nr,n,m,x,y,i,level[50100],curlv,rmq[21][100200],power,j,putere,poz[50100],p2[22],cost[50500],curcost,viz[50100];
vector<pair<int,int>>v[50100];
//ifstream f("file.in");
//ofstream g("file.out");
void precalceuler(int nod)
{
	if (poz[nod] == 0)
		poz[nod] = nr;
	euler[nr++] = nod;
	viz[nod] = 1;
	cost[nod] = curcost;
	level[nod] = curlv;
	if (v[nod].size() != 0)
	{
		curlv++;
		for (auto it = v[nod].begin(); it != v[nod].end(); it++)
			if (viz[it->first] == 0)
			{
				curcost += it->second;
				precalceuler(it->first);
				curcost -= it->second;
				euler[nr++] = nod;
			}
		curlv--;
	}
	
}
void precalcrmq()
{
	for (i = 1; i <= nr; i++)
		rmq[0][i] = euler[i];
	power = log2(nr);
	for (j = 1; j <= power; j++)
	{
		putere = p2[j];
		for (i = 1; i <= nr - putere; i++)
		{
			rmq[j][i] = min(rmq[j - 1][i], rmq[j - 1][i+(1<<(j-1))]);
		}
	}
}
void lca(int x, int y)
{
	int dist,poz1,poz2,ancestor;
	poz1 = poz[x];
	poz2 = poz[y];
	if (poz1 > poz2)
		swap(poz1, poz2);
	dist = poz2 - poz1;
	if (dist == 0)
		power = 0;
	else
		power = log2(dist);
	ancestor = min(rmq[power][poz1], rmq[power][poz2-p2[power]+1]);
	cout << cost[x] + cost[y] - 2 * cost[ancestor]<<'\n';
	//g << cost[x] + cost[y] - 2 * cost[ancestor] << '\n';
}
int main()
{

	cin >> n;
	//f >> n;
	p2[0] = 1;
	for (i = 1; i <= 22; i++)
		p2[i] = p2[i - 1] * 2;
	for (i = 2; i <= n; i++)
	{
		cin >> x >> y >> curcost;
		//f >> x >> y >> curcost;
		v[x].push_back(make_pair(y,curcost));
		v[y].push_back(make_pair(x,curcost));
	}
	curlv = 0;
	nr = 1;
	curcost = 0;
	precalceuler(0);
	nr--;
	precalcrmq();
	cin >> m;
	//f >> m;
	for (i = 1; i <= m; i++)
	{
		cin >> x >> y;
		//f >> x >> y;
		lca(x, y);
	}
	return 0;
}
