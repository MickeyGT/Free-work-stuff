#include<fstream>
#include<string.h>
#include<ctype.h>
#include<iostream>
#include<algorithm>
#include<map>
#include<unordered_map>
#include<array>
#include<deque>
#include<unordered_set>
#include<set>
#include<math.h>
using namespace std;
int n, dp[100100], i, a, b, val,el,prvval,j,anteval,ok,max1;
set<pair<int, int>>v;
set<pair<int, int>>::iterator it;
int main()
{
	ifstream f("file.in");
	ofstream g("file.out");
	f >> n;
	for (i = 1; i <= n; i++)
	{
		f >> a >> b;
		v.insert(make_pair(b, a));
	}
	max1 = -1;
	it = v.begin();
	for (j = 1; j <= n; j++)
	{
		i = it->first;
		ok = 0;
		if (i != v.begin()->second)
		{
			if (dp[i] == 0)
				dp[i] = prvval;
			else
			{
				dp[i] = max(prvval, dp[i]);
			}
			i++;
		}
		while (i != v.begin()->second)
		{
			if (dp[i] == 0)
				dp[i] = prvval;
			else
			{
				dp[i] = max(anteval, dp[i]);
				ok = 1;
			}
			i++;
		}
		if(!ok)
			dp[i] =  v.begin()->second - v.begin()->first+prvval;
		else
			dp[i] = v.begin()->second - v.begin()->first + anteval;
		if (max1 < dp[i])
			max1 = dp[i];
		el = anteval;
		anteval = prvval;
		if (!ok)
			prvval = prvval + v.begin()->second - v.begin()->first;
		else
			prvval = el + v.begin()->second - v.begin()->first;
	}
	g << max1;
	return 0;
}
