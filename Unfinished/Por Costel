#include<fstream>
#include<string.h>
#include<ctype.h>
#include<iostream>
#include<algorithm>
#include<map>
#include<unordered_map>
#include<array>
#include<deque>
#include<unordered_set>
using namespace std;
vector<int>extras;
vector<int>::iterator itr;
vector<pair<int, int>>v[100100];
vector<pair<int, int>>::iterator it;
map<pair<int, int>, int>mp;
map<pair<int, int>, int>::iterator iter;
deque<int>que;
int n, m, i, nstart, nend, cost, cmin[100010], nod, t, k, nr,msize;
bool incoada[100010], afisat[100010];
char buff[10000];
int poz = 0;
FILE * f;
FILE * g;
inline void citeste(int &numar)
{
	numar = 0;
	//cat timp caracterul din buffer nu e cifra ignor      
	while (buff[poz] < '0' || buff[poz] > '9')
		//daca am "golit" bufferul atunci il umplu
		if (++poz == 10000)
			fread(buff, 1, 10000,f), poz = 0;
	//cat timp dau de o cifra recalculez numarul          
	while ('0' <= buff[poz] && buff[poz] <= '9')
	{
		numar = numar * 10 + buff[poz] - '0';
		if (++poz == 10000)
			fread(buff, 1, 10000,f), poz = 0;
	}
}
int main()
{
	f = fopen("algoritm.in", "r");
	g = fopen("algoritm.out", "w+");
	//fscanf(f, "%d", &t);
	citeste(t);
	for (k = 1; k <= t; k++)
	{
		//fscanf(f, "%d %d", &n, &m);
		citeste(n);
		citeste(m);
		nr = 0;
		for (i = 1; i <= m; i++)
		{
			nr++;
			//fscanf(f, "%d %d %d", &nstart, &nend, &cost);
			citeste(nstart);
			citeste(nend);
			citeste(cost);
			if (nstart != nend)
			{
				msize = mp.size();
				mp.insert(make_pair(make_pair(nstart, nend), nr));
				if (msize == mp.size())
					extras.push_back(nr);
				else
					v[nstart].push_back(make_pair(nend, cost));
			}
			else
				extras.push_back(nr);
		}
		memset(cmin, 0x3f3f3f3f, sizeof(cmin));
		cmin[1] = 0;
		que.push_back(1);
		incoada[1] = 1;
		while (que.size() != 0)
		{
			nod = *que.begin();
			que.pop_front();
			incoada[nod] = 0;
			for (it = v[nod].begin(); it != v[nod].end(); it++)
				if (cmin[nod] + it->second < cmin[it->first])
				{
					fprintf(g, "%d ", mp[make_pair(nod, it->first)]);
					afisat[mp[make_pair(nod, it->first)]] = 1;
					cmin[it->first] = cmin[nod] + it->second;
					if (incoada[it->first] == 0)
					{
						que.push_back(it->first);
						incoada[it->first] = 1;
					}
				}
		}
		for (iter = mp.begin(); iter != mp.end(); iter++)
		{
			if (afisat[iter->second] == 0)
				fprintf(g, "%d ", iter->second);
		}
		for (itr = extras.begin(); itr != extras.end(); itr++)
			fprintf(g, "%d ", *itr);
		memset(incoada, 0, sizeof(incoada));
		memset(afisat, 0, sizeof(afisat));
		for (i = 1; i <= n; i++)
			v[i].clear();
		mp.clear();
		que.clear();
		extras.clear();
		fprintf(g, "\n");
	}
	return 0;
}
