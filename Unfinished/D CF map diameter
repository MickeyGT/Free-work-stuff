#include<fstream>
#include<string.h>
#include<ctype.h>
#include<iostream>
#include<algorithm>
#include<map>
#include<unordered_map>
#include<array>
#include<deque>
#include<queue>
#include<math.h>
#include<functional>
#include<unordered_set>
#include<set>
#include<iomanip>
#include<bitset>
using namespace std;
int n, i, j, k, nr, a, b, c, diameter, globalmin, g1, g2, one, gone;
struct pairhash
{
public:
	template <typename T, typename U>
	std::size_t operator()(const std::pair<T, U> &x) const
	{
		return std::hash<T>()(x.first) ^ std::hash<U>()(x.second);
	}
};
multimap<pair<int, int>, pair<int, int>>mp;
multimap<pair<int, int>, pair<int, int>>::iterator it, iter, itr;
inline void update_min(int x, int y, int z)
{
	int diameter = x;
	diameter = min(diameter, y);
	diameter = min(diameter, z);
	if (diameter > globalmin)
	{
		globalmin = diameter;
		g1 = i;
		g2 = itr->second.second;
	}
}
int main()
{
	cin >> n;
	for (i = 1; i <= n; i++)
	{
		cin >> a >> b >> c;
		if (a > b)
			swap(a, b);
		if (c < a)
			swap(a, c);
		if (c < b)
			swap(b, c);
		if (a > one)
		{
			one = a;
			gone = i;
		}
		itr = mp.find(make_pair(a, b));
		if (itr != mp.end())
		{
			update_min(a, b, c + itr->second.first);
			if (c > itr->second.first)
				itr->second.first = c;
		}
		else
			mp.insert(make_pair(make_pair(a, b), make_pair(c, i)));
		itr = mp.find(make_pair(a, c));
		if (itr != mp.end())
		{
			update_min(a, b + itr->second.first, c);
			if (b > itr->second.first)
				itr->second.first = b;
		}
		else
			mp.insert(make_pair(make_pair(a, c), make_pair(b, i)));
		itr = mp.find(make_pair(b, c));
		if (itr != mp.end())
		{
			update_min(a + itr->second.first, b, c);
			if (a > itr->second.first)
				itr->second.first = a;
		}
		else
			mp.insert(make_pair(make_pair(b, c), make_pair(a, i)));

	}
	if (globalmin > one)
	{
		cout << "2\n";
		cout << g1 << " " << g2;
	}
	else
	{
		cout << "1\n";
		cout << gone;
	}
	return 0;
}
