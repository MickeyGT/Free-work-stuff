#include<fstream>
#include<string.h>
#include<ctype.h>
#include<algorithm>
#include<map>
#include<unordered_map>
#include<array>
#include<deque>
#include<queue>
#include<math.h>
#include<functional>
#include<unordered_set>
#include<set>
#include<iostream>
#include<iomanip>
#include<bitset>
using namespace std;
int euler[200200], nr, n, m, x, y, i, level[200200], curlv, rmq[22][200200], power, j, putere, poz[200200], p2[23], cost[200200], curcost, viz[200200];
vector<pair<int, int>>v[200200];
//ifstream f("file.in");
//ofstream g("file.out");
ifstream f("radiatie.in");
ofstream g("radiatie.out");
////////////////////////////////
int k, c, point[200200], rang[200200];
struct edge
{
	int x;
	int y;
	int c;
}ed;
vector<edge>vec;
vector<edge>::iterator it;
vector<pair<int, int>>ans;
vector<pair<int, int>>::iterator iter;
int rez;
bool comp(edge a, edge b)
{
	return a.c < b.c;
}
int find(int x, int y)
{
	int compx = x, aux, compy = y;
	while (point[x] != x)
		x = point[x];
	while (point[y] != y)
		y = point[y];
	while (point[compx] != compx)
	{
		aux = point[compx];
		point[compx] = x;
		compx = aux;
	}
	while (point[compy] != compy)
	{
		aux = point[compy];
		point[compy] = y;
		compy = aux;
	}
	return x == y;
}
void tie(int x, int y)
{
	while (point[x] != x)
		x = point[x];
	while (point[y] != y)
		y = point[y];
	if (rang[x] > rang[y])
		point[y] = x;
	else
		point[x] = y;
	if (rang[x] == rang[y])
		rang[y]++;
}
void dfs(int nod)
{
	euler[++nr] = nod;
	if(poz[nod]==0)
		poz[nod] = nr;
	viz[nod] = 1;
	if (v[nod].size() != 0)
	{
		for (auto it = v[nod].begin(); it != v[nod].end(); it++)
			if (viz[it->first] == 0)
			{
				cost[nr] = it->second;
				dfs(it->first);
				cost[nr] = it->second;
				euler[++nr] = nod;
			}
	}
}
void precalcrmq()
{
	for (i = 1; i <= nr; i++)
		rmq[0][i] = cost[i];
	power = log2(nr);
	for (j = 1; j <= power; j++)
	{
		putere = p2[j];
		for (i = 1; i <= nr - putere+1; i++)
		{
			rmq[j][i] = rmq[j - 1][i];
			if (rmq[j - 1][i + p2[j-1]]>rmq[j][i])
				rmq[j][i] = rmq[j - 1][i + p2[j - 1]];
		}
	}
}
/*
void lca(int x, int y)
{
	int dist, poz1, poz2, ancestor, sh;
	poz1 = poz[x];
	poz2 = poz[y];
	if (poz1 > poz2)
		swap(poz1, poz2);
	dist = poz2 - poz1+1;
	power = log2(dist);
	ancestor = rmq[power][poz1];
	sh = dist - (p2[power]);
	if (rmq[power][poz1]<rmq[power][poz1 + sh])
		ancestor = rmq[power][poz1 + sh];
	g << ancestor << '\n';
}
*/
void lca(int x, int y)
{
	int dist, poz1, poz2, ancestor, sh;
	poz1 = poz[x];
	poz2 = poz[y];
	if (poz1 > poz2)
		swap(poz1, poz2);
	for (i = poz1; i <= poz2 - 1; i++)
		ancestor = max(ancestor, cost[i]);
	g << ancestor << '\n';
}
int main()
{
	p2[0] = 1;
	for (i = 1; i <= 22; i++)
		p2[i] = p2[i - 1] * 2;
	f >> n >> m >> k;
	for (i = 1; i <= m; i++)
	{
		f >> x >> y >> c;
		ed.x = x;
		ed.y = y;
		ed.c = c;
		vec.push_back(ed);
	}
	sort(vec.begin(), vec.end(), comp);
	it = vec.begin();
	for (i = 1; i <= n; i++)
	{
		point[i] = i;
		rang[i] = 1;
	}
	nr = 0;
	while (nr != n - 1)
	{
		if (!(find(it->x, it->y)))
		{
			nr++;
			tie(it->x, it->y);
			v[it->x].push_back(make_pair(it->y, it->c));
			v[it->y].push_back(make_pair(it->x, it->c));
		}
		if (it != vec.end())
			it++;
	}
	nr = 0;
	curcost = 0;
	dfs(1);
	nr--;
	//precalcrmq();
	for (j = 1; j <= k; j++)
	{
		f >> x >> y;
		if (x == y)
			g << "0\n";
		else
			lca(x, y);
	}
	return 0;
}
