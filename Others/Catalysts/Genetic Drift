#include<fstream>
#include<cstring>
#include<queue>
#include<algorithm>
#include<string.h>
#include<bitset>
#include<ctime>
#include<set>
#include<cmath>
#include<unordered_map>
#include<iomanip>
#include<map>
#include<stack>
#include<vector>
#include<bitset>
#include<functional>
#include<iostream>
#include<deque>
#include<unordered_set>
#include<queue>
#include<list>
#include<array>
#include<ctype.h>
using namespace std;
long long i, j, k, ok, nr, n, m, el, min1, max1, x, y, a, b,xi,xj,vec[1000100],nrcurrent,temp[1001000];
deque<int>deq;
unordered_map<int,int>st;
vector<pair<int, int>>v;
bool comp(pair<int, int>a, pair<int, int>b)
{
	return a.first < b.first;
}
int issorted()
{
	for (int i = 0; i < n - 1; i++)
		if (vec[i] > vec[i + 1])
			return 0;
	return 1;
}
int main()
{
	//ifstream f("file.in");
	//ofstream g("file.out");
	cin >> n;
	for (i = 0; i < n; i++)
	{
		cin >> el;
		vec[i] = el;
	}
	while (issorted() == 0)
	{
		xi = xj = max1=0;
		v.clear();
		st.clear();
		for (k= 0; k < n; k++)
		{
			el = vec[k];
			st.insert({ el ,k });
			if (st.find((el - 1)*(-1)) != st.end())
				v.push_back({ st.find((el - 1)*(-1))->second ,k });
			if (st.find((el + 1)*(-1)) != st.end())
				v.push_back({ st.find((el + 1)*(-1))->second ,k });
		}
		for (auto it = v.begin(); it != v.end(); it++)
		{
			i = it->first;
			j = it->second;
			deq.clear();
			for (k = 0; k < n; k++)
				temp[k] = vec[k];
			if (vec[i] + vec[j] == 1)
			{
				for (k = i; k < j; k++)
				{
					deq.push_back(temp[k]);
				}
				for (k = j - 1; k >= i; k--)
				{
					temp[k] = -deq.front();
					deq.pop_front();
				}
			}
			else
			{
				for (k = i + 1; k <= j; k++)
				{
					deq.push_back(temp[k]);
				}
				for (k = j; k > i; k--)
				{
					temp[k] = -deq.front();
					deq.pop_front();
				}
			}
			nrcurrent = 0;
			st.clear();
			for (k = 0; k < n; k++)
			{
				el = temp[k];
				st.insert({ el ,k });
				if (st.find((el - 1)*(-1)) != st.end())
					nrcurrent++;
				if (st.find((el + 1)*(-1)) != st.end())
					nrcurrent++;
			}
			if (nrcurrent > max1)
			{
				max1 = nrcurrent;
				xi = i;
				xj = j;
			}
		}
		deq.clear();
		if (vec[xi] + vec[xj] == 1)
		{
			for (k = xi; k < xj; k++)
			{
				deq.push_back(vec[k]);
			}
			for (k = xj - 1; k >= xi; k--)
			{
				vec[k] = -deq.front();
				deq.pop_front();
			}
		}
		else
		{
			for (k = xi + 1; k <= xj; k++)
			{
				deq.push_back(vec[k]);
			}
			for (k = xj; k > xi; k--)
			{
				vec[k] = -deq.front();
				deq.pop_front();
			}
		}
		nr++;
	}
	//sort(v.begin(), v.end(),comp);
	//cout << v.size()<<" ";
	//for (auto it = v.begin(); it != v.end(); it++)
		//cout << it->first << " " << it->second<<" ";
	//cin >> xi >> i >> xj >> j;
	//for (k = 0; k < n; k++)
		//cout << vec[k]<<" ";
	//cout << v.size();
	cout << nr;
	return 0;
}
