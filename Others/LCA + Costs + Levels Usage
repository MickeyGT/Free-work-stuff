#include<fstream>
#include<string.h>
#include<ctype.h>
#include<algorithm>
#include<map>
#include<unordered_map>
#include<array>
#include<deque>
#include<queue>
#include<math.h>
#include<functional>
#include<unordered_set>
#include<set>
#include<iostream>
#include<iomanip>
#include<bitset>
using namespace std;
int euler[200200],nr,n,m,x,y,i,level[200200],curlv,rmq[22][200200],power,j,putere,poz[200200],p2[23],cost[200200],curcost,viz[200200];
vector<pair<int,int>>v[200200];
//ifstream f("file.in");
//ofstream g("file.out");
void dfs(int nod, int lev)
{
	cost[nod] = curcost;
	euler[++nr] = nod; //nodul actual este adaugat in reprezentarea Euler a arborelui
	level[nr] = lev; //se retine nivelul fiecarei pozitii din reprezentarea Euler a arborelui
	poz[nod] = nr;
	viz[nod] = 1;//se retine si prima aparitie a fiecarui nod in reprezentarea Euler a arborelui
	if (v[nod].size() != 0)
	{
		for (auto it = v[nod].begin(); it != v[nod].end(); it++)
			if (viz[it->first] == 0)
			{
				curcost += it->second;
				dfs(it->first, lev + 1);
				curcost -= it->second;
				euler[++nr] = nod;
				level[nr] = lev;
			}
	}
}
void precalcrmq()
{
	for (i = 1; i <= nr; i++)
		rmq[0][i] = i;
	power = log2(nr);
	for (j = 1; j <= power; j++)
	{
		putere = p2[j-1];
		for (i = 1; i <= nr - putere; i++)
		{
			rmq[j][i] = rmq[j - 1][i]; 
			if(level[rmq[j-1][i+putere]]<level[rmq[j][i]])
				rmq[j][i]= rmq[j - 1][i + putere];
		}
	}
}
void lca(int x, int y)
{
	int dist,poz1,poz2,ancestor,sh;
	poz1 = poz[x];
	poz2 = poz[y];
	if (poz1 > poz2)
		swap(poz1, poz2);
	dist = poz2 - poz1 + 1;
	power = log2(dist);
	ancestor = rmq[power][poz1]; 
	sh = dist - (p2[power]);
	if(level[rmq[power][poz1]]>level[rmq[power][poz1+sh]])
		ancestor= rmq[power][poz1 + sh];
	ancestor = euler[ancestor];
	cout << cost[x] + cost[y] - 2 * cost[ancestor]<<'\n';
	//g << cost[x] + cost[y] - 2 * cost[ancestor] << '\n';
}
int main()
{

	cin >> n;
	//f >> n;
	p2[0] = 1;
	for (i = 1; i <= 22; i++)
		p2[i] = p2[i - 1] * 2;
	for (i = 2; i <= n; i++)
	{
		cin >> x >> y >> curcost;
		//f >> x >> y >> curcost;
		v[x].push_back(make_pair(y,curcost));
		v[y].push_back(make_pair(x,curcost));
	}
	curlv = 0;
	nr = 0;
	curcost = 0;
	dfs(0,0);
	nr--;
	precalcrmq();
	cin >> m;
	//f >> m;
	for (i = 1; i <= m; i++)
	{
		cin >> x >> y;
		//f >> x >> y;
		lca(x, y);
	}
	return 0;
}
