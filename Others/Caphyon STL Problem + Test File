#include<fstream>
#include<cstring>
#include<queue>
#include<algorithm>
#include<string.h>
#include<bitset>
#include<ctime>
#include<set>
#include<cmath>
#include<unordered_map>
#include<iomanip>
#include<map>
#include<stack>
#include<vector>
#include<bitset>
#include<functional>
#include<iostream>
#include<deque>
#include<unordered_set>
#include<queue>
#include<list>
#include<array>
#include<ctype.h>
using namespace std;
string s;
int i, j, nr, n, vsize;
vector<int>v, dp;
vector<string> database;

vector<string> LoadIndex()
{
	vector<string> words;

	ifstream inputFile("file.in");
	for (string line; std::getline(inputFile, line); )
		words.push_back(line);

	return words;
}

void SaveIndex(const vector<string> & words)
{
	ofstream outputFile("file.out");
	for (const auto & word : words)
		outputFile << word << endl;
}
// complexity: O(log2(n)) because of the lower bound.
int binarySearch(string s)
{
	auto it = lower_bound(database.begin(), database.end(), s);
	int nr = (it - database.begin()) + 1;
	if (nr<database.size() && *it == s)
		return nr + dp[nr] - 1;
	else
		if (nr <= database.size())
		{
			if (v[nr] != 0)
				return dp[nr] + nr - 2;
			else
				return dp[nr] + nr - 1;
		}
		else
			return dp[vsize] + vsize - 2;
}

// complexity: O(log2(n)) if we insert between 2 words and O(log2(n)+n) worst case if we
// insert in a free space at the beggining of the array because we need to update the dp vector.
void updateArray(string s)
{
	auto it = lower_bound(database.begin(), database.end(), s);
	int nr = (it - database.begin()) + 1;
	if (v[nr] != 0) // if we have free space to insert the word into.
	{
		database.insert(database.begin() + (nr-1), s);
		v.insert(v.begin() + nr, v[nr]-1);
		v[nr+1] = 0;
		dp.insert(dp.begin() + nr, dp[nr]);
		for (i = nr; i <= vsize + 1; i++)
			dp[i] = dp[i - 1] + v[i];
		vsize++;
	}
	else // if we need to insert between 2 words.
	{
		database.insert(database.begin() + (nr-1), s);
		v.insert(v.begin() + (nr), 0);
		dp.insert(dp.begin() + nr, dp[nr]);	
		vsize++;
	}
}

// separates the database into 2 vectors: one that only contains words and
// one that contains the amount of spaces before a certain word.
void prelucrare(vector<string> data)
{
	vector<string>temp;
	int nr = 0; // number of spaces before a word.
	vsize = 1; // represents the number of words different from nothing we have.
	for (auto it = data.begin(); it != data.end(); it++)
	{
		if ((*it).size() == 0)
		{
			nr++; // if it is a space, then we increase the number of spaces
		}
		else
		{
			temp.push_back(*it); // push back the words
			v[vsize] = nr; // set the number of spaces before the word.
			nr = 0; // reset the number of spaces.
			vsize++;
		}
	}
	vsize--;
	database.clear();
	data.clear(); 
	// transfering it from the temp vector to our main one.
	for (auto it = temp.begin(); it != temp.end(); it++)
		database.push_back(*it);
}
//function for inserting the spaces where they need to go before displaying.
void vectorFinal(vector<string> data)
{
	vector<string>temp;
	for (i = 1; i <= vsize; i++)
	{
		for (j = 1; j <= v[i]; j++)
			temp.push_back(" ");
		temp.push_back(data[i - 1]);
	}
	database.clear();
	for (auto it = temp.begin(); it != temp.end(); it++)
	{
		database.push_back(*it);
	}
}
int main()
{
	v.resize(10000);
	dp.resize(10000);
	database = LoadIndex();
	database.push_back("~~~~~~"); //needed so we can have an upper bound. will be deleted at the end.
	prelucrare(database);
	for (i = 1; i <= vsize; i++) // partial sum vector so we know how many spaces we have until a word.
		dp[i] = dp[i - 1] + v[i];
	cout << binarySearch("ggg") << '\n'; 
	cout << binarySearch("iii") << '\n'; 
	cout << binarySearch("mmm") << '\n'; 
	cout << binarySearch("nnn") << '\n'; 
	cout << binarySearch("ppp") << '\n'; 
	cout << binarySearch("aac") << '\n';
	cout << binarySearch("llx") << '\n'; 

	updateArray("aax"); 
	updateArray("zza"); 
	updateArray("nnn"); 
	updateArray("aac"); 
	updateArray("ffx"); 
	updateArray("ggx"); 
	database.pop_back(); // pop-ing "~~~~~~"
	vsize--; // decreasing size because of above operation.
	vectorFinal(database); // final computing of the vector.
	SaveIndex(database);
	return 0;
}
//////////////////////////


aaa
bbb

ccc
ddd

eee

fff
ggg
hhh




iii


kkk

lll
mmm

ooo



