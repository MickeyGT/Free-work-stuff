#include<fstream>
#include<string.h>
#include<ctype.h>
#include<iostream>
#include<algorithm>
#include<map>
#include<unordered_map>
#include<array>
#include<deque>
#include<math.h>
#include<unordered_set>
#include<set>
#include<iomanip>
#include<bitset>
using namespace std;
int n, m, k, rang[255][255], type, x, y,input[70000][2],i,j,max1,inmultime[255][255];
pair<int, int> point[255][255];
deque<int>que;
void find(pair<int, int> x, pair<int, int> y)
{
	pair<int,int> compx = x, aux, compy = y;
	while (point[x.first][x.second] != x)
		x = point[x.first][x.second];
	while (point[y.first][y.second] != y)
		y = point[y.first][y.second];
	while (point[compx.first][compx.second] != compx)
	{
		aux = point[compx.first][compx.second];
		point[compx.first][compx.second] = x;
		compx = aux;
	}
	while (point[compy.first][compy.second] != compy)
	{
		aux = point[compy.first][compy.second];
		point[compy.first][compy.second] = y;
		compy = aux;
	}
	if (x != y)
	{
		if (rang[x.first][x.second] > rang[y.first][y.second])
		{
			point[y.first][y.second] = x;
			rang[x.first][x.second] += rang[y.first][y.second];
			if (rang[x.first][x.second] > max1)
				max1 = rang[x.first][x.second];
		}
		else
		{
			point[x.first][x.second] = y;
			rang[y.first][y.second] += rang[x.first][x.second];
			if (rang[y.first][y.second] > max1)
				max1 = rang[y.first][y.second];
		}
		
	}
}
int main()
{
	//ifstream f("file.in");
	//ofstream g("file.out");
	ifstream f("bile.in");
	ofstream g("bile.out");
	f >> n;
	for (i = 1; i <= n; i++)
		for(j=1;j<=n;j++)
		{
			point[i][j] = {i,j};
			rang[i][j] = 1;
		}
	for (k = 1; k <= n*n; k++)
	{
		f >> input[k][0] >> input[k][1];
	}
	for (k = n*n; k >= 2; k--)
	{
		x = input[k][0];
		y = input[k][1];
		inmultime[x][y] = 1;
		max1 = max(max1, 1);
		if (x - 1 >= 1 && y >= 1 && x - 1 <= n&&y <= n && inmultime[x-1][y]==1)
		{
			find({ x, y }, { x-1, y });
		}
		if (x+1 >= 1 && y >= 1 && x+1 <= n&&y <= n&& inmultime[x + 1][y] == 1)
		{
			find({ x, y }, { x+1, y });
		}
		if (x >= 1 && y-1 >= 1 && x <= n&&y-1 <= n&& inmultime[x][y-1] == 1)
		{
			find({ x, y }, { x, y-1 });
		}
		if (x >= 1 && y+1 >= 1 && x <= n&&y+1 <= n&& inmultime[x][y+1] == 1)
		{
			find({ x, y }, { x, y +1});
		}
		que.push_front(max1);
	}
	for (auto it = que.begin(); it != que.end(); it++)
		g << *it << '\n';
	g << "0\n";
	return 0;
}
