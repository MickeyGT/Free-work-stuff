#include<fstream>
#include<string.h>
#include<ctype.h>
#include<iostream>
#include<algorithm>
#include<map>
#include<unordered_map>
#include<array>
#include<deque>
#include<math.h>
#include<unordered_set>
#include<set>
#include<iomanip>
#include<bitset>
using namespace std;
int i, j, m, n, rmq[21][200250], lg, k, pw, st, dr, power[20], x, y, q, nr, max1,frow[200200];
map<int, int>mp;
map<int, int>::iterator it;
int find(int st, int dr)
{
    if (rmq[0][st] >= dr)
        return nr + 1;
    for (i = 1; i <= 19; i++)
        if (rmq[i][st] >= dr)
        {
            nr += power[i - 1];
            return find(rmq[i - 1][st], dr);
        }
    if (i == 20)
        return -1;
}
int main()
{
    //ifstream f("file.in");
    //ofstream g("file.out");
    ifstream f("reborn.in");
    ofstream g("reborn.out");
    f >> n >> m >> q;
    for (i = 1; i <= m; i++)
    {
        f >> x >> y;
        frow[x] = max(frow[x], y);
    }
    max1 = 0;
    for (i = 1; i <= n; i++)
    {
        if (frow[i] > max1)
        {
            max1 = frow[i];
            rmq[0][i] = max1;
        }
        else
            if(i<=max1)
                rmq[0][i] = max1;
    }
    power[0] = 1;
    power[1] = 2;
    for (i = 2; i <= 19; i++)
        power[i] = power[i - 1] * 2;
    lg = log2(n);
    for (k = 1; k <= lg; k++)
    {
        for (i = 1; i <= n; i++)
        {
                rmq[k][i] = rmq[k - 1][rmq[k - 1][i]];
        }
    }
    for (k = 1; k <= q; k++)
    {
        f >> st >> dr;
        if (st > dr)
        {
            int aux = st;
            st = dr;
            dr = aux;
        }
        nr = 0;
        if (st == dr)
            g << "0\n";
        else
            g << find(st, dr) << '\n';
    }
    return 0;
}
