#include<fstream>
#include<string.h>
#include<ctype.h>
#include<iostream>
#include<algorithm>
#include<map>
#include<unordered_map>
#include<array>
#include<deque>
#include<math.h>
#include<unordered_set>
#include<set>
#include<iomanip>
#include<bitset>
using namespace std;
long long n, arb[300300], lazy[340140], v[100100], pozm[300300], i, sumi, sumf, k, start, poz;
ifstream f("biscuiti.in");
ofstream g("biscuiti.out");
//ifstream f("file.in");
//ofstream g("file.out");
void update(int nod, int in, int sf, int diff)
{
	if (in == sf)
	{
		arb[nod] = 1LL << 60;
		return;
	}
	lazy[nod << 1] += lazy[nod];
	lazy[(nod << 1)+1] += lazy[nod];
	lazy[nod] = 0;
	int mid = (in + sf) / 2;
	if (pozm[1] <= mid)
		update(nod << 1, in, mid, diff);
	else
	{
		lazy[nod << 1] += diff;
		update((nod << 1) + 1, mid + 1, sf, diff);
	}
	if (arb[nod << 1]+lazy[nod<<1] <= arb[(nod << 1) + 1]+lazy[(nod << 1) + 1])
	{
		arb[nod] = arb[nod << 1] + lazy[nod << 1];
		pozm[nod] = pozm[nod << 1];
	}
	else
	{
		arb[nod] = arb[(nod << 1) + 1] + lazy[(nod << 1) + 1];
		pozm[nod] = pozm[(nod << 1) + 1];
	}
}
void construct(int in, int sf, int curr)
{
	if (in > sf)
		return;
	if (in == sf)
	{
		arb[curr] = v[in];
		pozm[curr] = in;
		return;
	}
	int mid = (in + sf) / 2;
	construct(in, mid, curr << 1);
	construct(mid + 1, sf, (curr << 1) + 1);
	if (arb[curr << 1] <= arb[(curr << 1) + 1])
	{
		arb[curr] = arb[curr << 1];
		pozm[curr] = pozm[curr << 1];
	}
	else
	{
		arb[curr] = arb[(curr << 1) + 1];
		pozm[curr] = pozm[(curr << 1) + 1];
	}
}


int main()
{
	f >> n;
	for (i = 1; i <= n; i++)
	{
		f >> v[i];
		sumi += v[i];
	}
	construct(1, n, 1);
	for (k = 1; k <= n; k++)
	{
		sumf += arb[1];
		update(1, 1, n, k);
	}
	g << sumf - sumi;
	return 0;
}
