#include<fstream>
#include<string.h>
#include<ctype.h>
#include<iostream>
#include<algorithm>
#include<map>
#include<unordered_map>
#include<array>
#include<deque>
#include<math.h>
#include<unordered_set>
#include<set>
#include<iomanip>
#include<bitset>
using namespace std;
int n, k, point[16160], rang[16160], type, x, y,i,res;
int find(int x)
{
    int compx = x, aux;
    while (point[x] != x)
        x = point[x];
    while (point[compx] != compx)
    {
        aux = point[compx];
        point[compx] = x;
        compx = aux;
    }
    return x;
}
void tie(int x, int y)
{
    while (point[x] != x)
        x = point[x];
    while (point[y] != y)
        y = point[y];
    if (rang[x] >= rang[y])
    {
        rang[x] += rang[y];
        point[y] = x;
    }
    else
    {
        rang[y] += rang[x];
        point[x] = y;
    }
}
map<pair<int, int>, int>startc;
map<pair<int, int>, int>::iterator it, iter,itr;
int fr[16160];
int main()
{
    //ifstream f("file.in");
    //ofstream g("file.out");
    ifstream f("banana.in");
    ofstream g("banana.out");
    f >> n >> k;
    for (i = 1; i <= n; i++)
    {
        f >> x >> y;
        startc.insert(make_pair(make_pair(x, y), i));
        point[i] = i;
        rang[i] = 1;
    }
    iter = startc.begin();
    while (iter != startc.end())
    {
        itr= startc.find(make_pair(iter->first.first-1, iter->first.second));
        if (iter != startc.end() && itr != startc.end() && find(iter->second) != find(itr->second))
            tie(iter->second, itr->second);
        itr = startc.find(make_pair(iter->first.first, iter->first.second-1));
        if (iter != startc.end() && itr != startc.end() && find(iter->second) != find(itr->second))
            tie(iter->second, itr->second);
        itr = startc.find(make_pair(iter->first.first +1, iter->first.second));
        if (iter != startc.end() && itr != startc.end() && find(iter->second) != find(itr->second))
            tie(iter->second, itr->second);
        itr = startc.find(make_pair(iter->first.first , iter->first.second+1));
        if (iter != startc.end() && itr != startc.end() && find(iter->second) != find(itr->second))
            tie(iter->second, itr->second);
        iter++;
    }
    for (i = 1; i <= n; i++)
        fr[find(i)]++;
    sort(fr + 1, fr + n + 1);
    for (i = n; i >= n - k+1; i--)
        res += fr[i];
    g << res;
    return 0;
}
