#include<fstream>
#include<cstring>
#include<queue>
#include<algorithm>
#include<string.h>
#include<bitset>
#include<ctime>
#include<set>
#include<cmath>
#include<unordered_map>
#include<iomanip>
#include<map>
#include<stack>
#include<vector>
#include<bitset>
#include<functional>
#include<iostream>
#include<deque>
#include<unordered_set>
#include<queue>
#include<list>
#include<array>
#include<ctype.h>
using namespace std;
long long i, j, k, ok, nr, n, m, el, min1, max1, x, y, a, b,v[100100],dp[100100],nr1,rez=1LL<<30;
int main()
{
	//ifstream f("file.in");
	//ofstream g("file.out");
	cin >> n;
	for (i = 1; i <= n; i++)
	{
		cin >> v[i];
		if (v[i])
			nr1++;
	}
	if (nr1 == 0 || nr1 == n)
	{
		cout << 0;
		return 0;
	}
	v[n + 1] = v[1];
	v[0] = v[n];
	for (i = 2; i <= n+1; i++)
		if (v[i] == 1)
			dp[i] = dp[i - 1] + 1;
	if (dp[n + 1] > 0)
	{
		dp[1] = dp[n + 1];
		for (i = 2; i <= n + 1; i++)
			if (v[i] == 1)
				dp[i] = dp[i - 1] + 1;
	}
	for (i = 1; i <= n; i++)
		max1 = max(max1, dp[i]);
	rez = min(rez, nr1 - max1);
	/////////////
	memset(dp, 0, sizeof(dp));
	for (i = 2; i <= n + 1; i++)
		if (v[i] == 0)
			dp[i] = dp[i - 1] + 1;
	if (dp[n + 1] > 0)
	{
		dp[1] = dp[n + 1];
		for (i = 2; i <= n + 1; i++)
			if (v[i] == 0)
				dp[i] = dp[i - 1] + 1;
	}
	max1 = -1;
	for (i = 1; i <= n; i++)
		max1 = max(max1, dp[i]);
	rez = min(rez, n - nr1 - max1);
	cout << rez;
	return 0;
}
