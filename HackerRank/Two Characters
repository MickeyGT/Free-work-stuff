#include<fstream>
#include<string.h>
#include<ctype.h>
#include<iostream>
#include<algorithm>
#include<map>
#include<unordered_map>
#include<array>
#include<deque>
#include<math.h>
#include<unordered_set>
#include<set>
#include<iomanip>
#include<bitset>
using namespace std;
char s[1010];
int fr[30], l, i, ok,j,maxim;
char c1, c2;
int main()
{
    cin >> l;
    cin >> s;
    for (i = 0; i <= l - 1; i++)
        fr[s[i] - 'a' + 1]++;
    for (c1 = 'a'; c1 < 'z'; c1++)
        for (c2 = c1 + 1; c2 <= 'z'; c2++)
            if (fabs(fr[c1 - 'a' + 1] - fr[c2 - 'a'+1])<=1&& fr[c1 - 'a' + 1]!=0 && fr[c2 - 'a' + 1] != 0)
            {
                if (fr[c1 - 'a' + 1] == fr[c2 - 'a' + 1])
                {
                    ok = 0;
                    for (i = 0; i <= l - 1; i++)
                        if (s[i] == c1 || s[i] == c2)
                        {
                            if (ok == 1)
                            {
                                if (s[i] == c2)
                                    ok = -1;
                                else
                                    break;
                            }
                            else
                                if (ok == -1)
                                {
                                    if (s[i] == c1)
                                        ok = 1;
                                    else
                                        break;
                                }
                            if (ok == 0)
                            {
                                if (s[i] == c2)
                                    ok = -1;
                                else
                                    ok = 1;
                            }
                        }
                    if (i == l)
                    {
                        if (fr[c1 - 'a' + 1] + fr[c2 - 'a' + 1] > maxim)
                            maxim = fr[c1 - 'a' + 1] + fr[c2 - 'a' + 1];
                    }
                }
                if (fr[c1 - 'a' + 1] > fr[c2 - 'a' + 1])
                {
                    ok = -1;
                    for (i = 0; i <= l - 1; i++)
                        if (s[i] == c1 || s[i] == c2)
                        {
                            if (ok==1)
                            {
                                if (s[i] == c2)
                                    ok = -1;
                                else
                                    break;
                            }
                            else
                            {
                                if (s[i] == c1)
                                    ok = 1;
                                else
                                    break;
                            }
                        }
                    if (i == l)
                    {
                        if (fr[c1 - 'a' + 1] + fr[c2 - 'a' + 1] > maxim)
                            maxim = fr[c1 - 'a' + 1] + fr[c2 - 'a' + 1];
                    }
 
                }
                else
                {
                    ok = 1;
                    for (i = 0; i <= l - 1; i++)
                        if (s[i] == c1 || s[i] == c2)
                        {
                            if (ok==1)
                            {
                                if (s[i] == c2)
                                    ok = -1;
                                else
                                    break;
                            }
                            else
                            {
                                if (s[i] == c1)
                                    ok = 1;
                                else
                                    break;
                            }
                        }
                    if (i == l)
                    {
                        if (fr[c1 - 'a' + 1] + fr[c2 - 'a' + 1] > maxim)
                            maxim = fr[c1 - 'a' + 1] + fr[c2 - 'a' + 1];
                    }
 
                }
            }
    cout << maxim;
    return 0;
}
