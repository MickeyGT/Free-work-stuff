#include<fstream>
#include<string.h>
#include<ctype.h>
#include<algorithm>
#include<map>
#include<unordered_map>
#include<array>
#include<deque>
#include<queue>
#include<math.h>
#include<functional>
#include<unordered_set>
#include<set>
#include<iostream>
#include<iomanip>
#include<bitset>
using namespace std;
multimap<long long, long long>dist;
multimap<long long, long long>::iterator it, iter;
long long n, kx, ky, safe[10], i, piese[500500][3], x, y, ok;
char type;
int main()
{
	cin >> n;
	cin >> kx >> ky;
	for (i = 1; i <= n; i++)
	{
		cin >> type;
		cin >> x;
		cin >> y;
		piese[i][0] = type;
		piese[i][1] = x;
		piese[i][2] = y;
		dist.insert(make_pair(abs(kx - piese[i][1]) + abs(ky - piese[i][2]), i));
	}
	it = dist.begin();
	while (it != dist.end())
	{
		if (piese[it->second][0] == 'R')
		{
			if (piese[it->second][2] == ky)
			{
				if (piese[it->second][1] < kx&&safe[2] == 0)
				{
					cout << "YES";
					return 0;
				}
				if (piese[it->second][1] > kx&&safe[8] == 0)
				{
					cout << "YES";
					return 0;
				}
			}
			if (piese[it->second][1] == kx)
			{
				if (piese[it->second][2] > ky&&safe[6] == 0)
				{
					cout << "YES";
					return 0;
				}
				if (piese[it->second][2] < ky&&safe[4] == 0)
				{
					cout << "YES";
					return 0;
				}
			}
			if (abs(piese[it->second][1] - kx) == abs(piese[it->second][2] - ky))
			{
				if (piese[it->second][1] < kx&&piese[it->second][2]>ky)
				{
					safe[3] = 1;
				}
				if (piese[it->second][1] > kx&&piese[it->second][2]<ky)
				{
					safe[7] = 1;
				}
				if (piese[it->second][1] < kx&&piese[it->second][2]<ky)
				{
					safe[1] = 1;
				}
				if (piese[it->second][1] > kx&&piese[it->second][2]>ky)
				{
					safe[9] = 1;
				}
			}
		}
		else
			if (piese[it->second][0] == 'B')
			{
				if (abs(piese[it->second][1] - kx) == abs(piese[it->second][2] - ky))
				{
					if (piese[it->second][1] < kx&&piese[it->second][2] > ky&&safe[3] == 0)
					{
						cout << "YES";
						return 0;
					}
					if (piese[it->second][1] > kx&&piese[it->second][2]<ky&&safe[7] == 0)
					{
						cout << "YES";
						return 0;
					}
					if (piese[it->second][1] < kx&&piese[it->second][2] < ky &&safe[1] == 0)
					{
						cout << "YES";
						return 0;
					}
					if (piese[it->second][1] > kx&&piese[it->second][2] > ky &&safe[9] == 0)
					{
						cout << "YES";
						return 0;
					}
				}
				if (piese[it->second][2] == ky)
				{
					if (piese[it->second][1] > kx)
					{
						safe[8] = 1;
					}
					if (piese[it->second][1] < kx)
					{
						safe[2] = 1;
					}
				}
				if (piese[it->second][1] == kx)
				{
					if (piese[it->second][2] > ky)
					{
						safe[6] = 1;
					}
					if (piese[it->second][2] < ky)
					{
						safe[4] = 1;
					}
				}
			}
			else
				if (piese[it->second][0] == 'Q')
				{
					if (abs(piese[it->second][1] - kx) == abs(piese[it->second][2] - ky))
					{
						if (piese[it->second][1] < kx&&piese[it->second][2] > ky&&safe[3] == 0)
						{
							cout << "YES";
							return 0;
						}
						if (piese[it->second][1] > kx&&piese[it->second][2]<ky&&safe[7] == 0)
						{
							cout << "YES";
							return 0;
						}
						if (piese[it->second][1] < kx&&piese[it->second][2] < ky &&safe[1] == 0)
						{
							cout << "YES";
							return 0;
						}
						if (piese[it->second][1] > kx&&piese[it->second][2] > ky &&safe[9] == 0)
						{
							cout << "YES";
							return 0;
						}
					}
					if (piese[it->second][2] == ky)
					{
						if (piese[it->second][1] < kx&&safe[2] == 0)
						{
							cout << "YES";
							return 0;
						}
						if (piese[it->second][1] > kx&&safe[8] == 0)
						{
							cout << "YES";
							return 0;
						}
					}
					if (piese[it->second][1] == kx)
					{
						if (piese[it->second][2] > ky&&safe[6] == 0)
						{
							cout << "YES";
							return 0;
						}
						if (piese[it->second][2] < ky&&safe[4] == 0)
						{
							cout << "YES";
							return 0;
						}
					}
				}
		it++;
	}
	cout << "NO";
	return 0;
}
