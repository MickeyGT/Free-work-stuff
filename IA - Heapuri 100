#include<stdlib.h>
#include<stdio.h>
#include<fstream>
#include<string.h>
#include<set>
#include<algorithm>
using namespace std;
int n,i,type,el,v[200010],nr;
multiset <int> Set;


int main()
{
	ifstream f("heapuri.in");
	ofstream g("heapuri.out");
	f >> n;
	nr = 1;
	for (i = 1;i <= n;i++)
	{
		f >> type;
		if (type == 1)
		{
			f >> el;
			v[nr++] = el;
			Set.insert(el);
		}
		else
			if (type == 2)
			{
				f >> el;
				Set.erase(v[el]);
			}
			else
				g << *(Set.begin())<<"\n";
	}
	return 0;
}

----------------------------------------------------------------------------

#include <set>
using namespace std;
 
int main() {
    multiset <int> my_set;
    my_set.insert(1); // Insereaza o valoare.
    my_set.insert(1);
 
    if (my_set.find(1) != my_set.end()) { // Cauta o valoare.
        printf("Am gasit 1 in set!\n");
    } else {
        printf("1 nu se afla set!\n");
    }
 
    // Sterge o valoare din set. Daca aceasta se afla de
    // mai multe ori in set, este stearsa numai o copie.
    my_set.erase(my_set.find(1));
    printf("Exista %d elemente in set\n", my_set.size());
 
    my_set.insert(1);
    my_set.insert(1);
 
    // Sterge o valoare din set. Daca aceasta se afla de
    // mai multe ori in set, sunt sterse toate copiile.
    my_set.erase(1);
    printf("Exista %d elemente in set\n", my_set.size());
 
    my_set.insert(1);
    my_set.insert(-3);
    my_set.insert(7);
 
    // Valoarea minima.
    multiset <int> :: iterator it = my_set.begin();
    printf("Valoarea cea mai mica din set este %d\n", *it);
 
    // Valoarea maxima.
    it = my_set.end();
    --it;
    printf("Valoarea cea mai mare din set este %d\n", *it);
    return 0;
}
